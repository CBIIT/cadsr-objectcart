<?xml version="1.0" encoding="UTF-8"?>
<project name="System" basedir="." default="local-build">

	<description>Build script for building the runtime system</description>

	<!--***********************************************************************
	*** Load the build properties
	*********************************************************************** -->

	<property file="anthill.properties" />
	
	<property name="objcartversion" value="10"/>
	<property name="src.dir" value="src"/>
	<property name="lib.dir" value="lib"/>
	<property name="web.dir" value="web"/>
	<property name="docs.dir" value="docs"/>
	<property name="conf.dir" value="conf"/>
	<property name="orm.dir" value="conf/ORM"/>
	<property name="system.lib.dir" value="system/lib"/>
	<property name="sql.dir" value="sql"/>
	<property name="ds.dir" value="ds"/>
	
	<property name="build.dir" value="build"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	<property name="dist.dir" value="dist"/>

	<property name="file.output.extension.client.name" value="extension-client-framework.jar"/>
	<property name="file.output.extension.core.name" value="extension-core.jar"/>
	<property name="file.output.cart.orm.name" value="objectCart-orm.jar"/>

	<property name="output.client.remote.dir" value="dist/remote"/>
	<property name="config.client.remote.dir" value="conf/system/package/remote-client/conf"/>	
	
	<!--***********************************************************************
	*** Import utility script
	*********************************************************************** -->
	<import file="build-scripts\build-utils.xml" />

	<!--***********************************************************************
	*** CLASSPATH AND UNIX-STYLE BASEDIR PROPERTIES
	*********************************************************************** -->
	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${system.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- set basedir.url = basedir as unix style pathname, regardless of platform -->
	<path id="basedir.path">
		<pathelement path="${basedir}" />
	</path>

	<pathconvert targetos="unix" property="basedir.unix" refid="basedir.path" />


	<!--***********************************************************************
	*** Prepares the directory structure
	*********************************************************************** -->
	<target name="init">
		<SDKecho message="${ant.project.name}: Preparing directories" />
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!--***********************************************************************
	*** Condition determining if clean is possible or not
	*********************************************************************** -->
	<target name="prepare-clean-condition">
		<SDKecho message="${ant.project.name}: Checking the condition for cleaning" />
		<condition property="clean-condition-met">
			<available file="${src.dir}" type="dir" />
		</condition>
	</target>

	<!--***********************************************************************
	*** Cleans the generated directories and files
	*********************************************************************** -->
	<target name="clean" description="Cleans the generated directories and files" depends="prepare-clean-condition" if="clean-condition-met">
		<SDKecho message="${ant.project.name}: Cleaning directories and files" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!--***********************************************************************
	*** Compiles source code
	*********************************************************************** -->
	<target name="compile" depends="init" description="Compiles source code">
		<SDKecho message="${ant.project.name}: Compiling source code" />
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true">
			<classpath refid="classpath" />
			<exclude name="gov/nih/nci/objectCart/jUnit/**/*"/>
		</javac>
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.dir}" includes="gov/nih/nci/system/web/struts/action/package.properties" />
		</copy>
	</target>


	<!--***********************************************************************
	*** Prepares for deployment on particular tier
	*********************************************************************** -->
	<target name="copy-hql">
		<SDKecho message="${ant.project.name}: Copying HQL config" />
		<copy todir="${orm.dir}" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="hibernate.cfg.xml" />
			</fileset>
		</copy>
	</target>

	<target name="copy-remote">
		<SDKecho message="${ant.project.name}: Copying remote-client config" />
		<mkdir dir="${output.client.remote.dir}"/>
		<mkdir dir="${output.client.remote.dir}/conf"/>
		<mkdir dir="${output.client.remote.dir}/lib"/>

		<copy todir="${output.client.remote.dir}/conf">
			<fileset dir="${config.client.remote.dir}"/>
		</copy>

	</target>

    <target name="prop-check" unless="check.props" description="Verifies the presence of all required properties.">
        <fail>Missing one or more properties.</fail>
    </target>
	
	<target name="anthill" depends="copy-hql, copy-remote" description="Setting up for anthill deployment">
			<SDKecho message="${ant.project.name}: Deploying to ${TIER.NAME}" />
	         
		 <echo>
		        CADSR.DS.URL = ${CADSR.DS.URL}
		        CADSR.DS.USER = ${CADSR.DS.USER}
		        CADSR.DS.PSWD = ${CADSR.DS.PSWD}
                CADSR.DS.TNS.ENTRY=${CADSR.DS.TNS.ENTRY}
                OBJCART.DS.URL= ${OBJCART.DS.URL} 
		 	    OBJCART.DS.USER= ${OBJCART.DS.USER} 
		 	    OBJCART.DS.PSWD= ${OBJCART.DS.PSWD}
		        DEPLOY.LOCATION = ${DEPLOY.LOCATION}
		        JBOSS.HOME.DIR = ${JBOSS.HOME.DIR}
		        JBOSS.SERVER.DIR = ${JBOSS.SERVER.DIR}
		        JBOSS.CONF.DIR = ${JBOSS.CONF.DIR}
		        JBOSS.DEPLOY.DIR = ${JBOSS.DEPLOY.DIR}
		        JBOSS.LOG.DIR = ${JBOSS.LOG.DIR}
		        SCP.USER = ${SCP.USER}
		        SCP.HOST = ${SCP.HOST}
		        SCP.PATH = ${SCP.PATH}
		        SCP.KEYFILE = ${SCP.KEYFILE}
		        SCP.PASSPHRASE = ${SCP.PASSPHRASE}
		        SCP.PORT = ${SCP.PORT}
		        SQL.EXE = ${SQL.EXE}
		        TIER = ${TIER}
		        TIER.UPPER = ${TIER.UPPER}
		        TIER.NAME = ${TIER.NAME}
		    </echo>
		
			<condition property="check.props">
		  	     <and>
		            <isset property="CADSR.DS.URL" />
		            <isset property="CADSR.DS.USER" />
		            <isset property="CADSR.DS.PSWD" />
		            <isset property="CADSR.DS.TNS.ENTRY"/>
		            <isset property="OBJCART.DS.URL" />
		            <isset property="OBJCART.DS.USER" />
		            <isset property="OBJCART.DS.PSWD" />
		            <isset property="TIER" />
		            <isset property="TIER.UPPER" />
		            <isset property="TIER.NAME" />
		            <isset property="JBOSS.HOME.DIR" />
		            <isset property="JBOSS.SERVER.DIR" />
		            <isset property="JBOSS.CONF.DIR" />
		            <isset property="JBOSS.DEPLOY.DIR" />
		            <isset property="JBOSS.LOG.DIR" />
		            <isset property="SCP.USER" />
		            <isset property="SCP.HOST" /> 
		            <isset property="SCP.PATH" />
		            <isset property="SCP.KEYFILE" />
		            <isset property="SCP.PORT" />
		            <isset property="SCP.PASSPHRASE" />
		            <isset property="DEPLOY.LOCATION" />
		            <isset property="SQL.EXE" />
		        </and>
		    </condition>
		
		    <condition property="remote.deploy" >
		        <equals arg1="${DEPLOY.LOCATION}" arg2="remote" casesensitive="false" trim="true"/>
		    </condition> 
			<condition property="scp.pass" >
				<isset property="SCP.PASSPHRASE" />
			</condition> 
			<condition property="scp.key" >
				<not>
					<isset property="SCP.PASSPHRASE" />
				</not>
			</condition> 
		
			<echo> Remote Deploy = ${remote.deploy} </echo>
			<echo> Check Props = ${check.props} </echo>
			<echo> scp.pass = ${scp.pass} </echo>
			<echo> scp.key = ${scp.key} </echo>
		
		</target>
	
	<target name="dev" depends="copy-hql, copy-remote" description="Setting up for developement deployment">
		<SDKecho message="${ant.project.name}: Deploying to DEV" />

		<replace file="${orm.dir}/hibernate.cfg.xml">
			<replacefilter token="@DB_CONNECTION_URL@" value="${DEV_DB_CONNECTION_URL}" />
			<replacefilter token="@DB_USERNAME@" value="${DEV_DB_USERNAME}" />
			<replacefilter token="@DB_PASSWORD@" value="${DEV_DB_PASSWORD}" />
			<replacefilter token="@DB_HIBERNATE_DIALECT@" value="${DB_DIALECT}" />
			<replacefilter token="@DB_DRIVER@" value="${DB_DRIVER}" />
		</replace>

		<replace file="${output.client.remote.dir}/conf/application-config-client.xml">
			<replacefilter token="@SERVER_URL@" value="${DEV_SERVER_URL}" />
		</replace>
	</target>

	<target name="local" depends="copy-hql, copy-remote" description="Setting up for local deployment">
		<SDKecho message="${ant.project.name}: Deploying to local environment" />
		<property name="local" value="true"/>

		<replace file="${orm.dir}/hibernate.cfg.xml">
			<replacefilter token="@DB_CONNECTION_URL@" value="${LOCAL_DB_CONNECTION_URL}" />
			<replacefilter token="@DB_USERNAME@" value="${LOCAL_DB_USERNAME}" />
			<replacefilter token="@DB_PASSWORD@" value="${LOCAL_DB_PASSWORD}" />
			<replacefilter token="@DB_HIBERNATE_DIALECT@" value="${DB_DIALECT}" />
			<replacefilter token="@DB_DRIVER@" value="${DB_DRIVER}" />
		</replace>

		<replace file="${output.client.remote.dir}/conf/application-config-client.xml">
			<replacefilter token="@SERVER_URL@" value="${LOCAL_SERVER_URL}" />
		</replace>

	</target>

	<!--***********************************************************************
	*** Create distributable package
	*********************************************************************** -->
	<target name="dist" depends="compile" description="Prepates distribution files">
		<SDKecho message="${ant.project.name}: Creating distributable package" />

		<jar destfile="${lib.dir}\${file.output.cart.orm.name}" basedir="${orm.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
			</manifest>
		</jar>

		<jar destfile="${dist.dir}\${file.output.extension.client.name}" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
			</manifest>
			<include name="gov/nih/nci/objectCart/client/**/*" />
			<include name="gov/nih/nci/objectCart/applicationService/*.*" />
			<include name="gov/nih/nci/objectCart/util/ValidatorException.*"/>
			<fileset dir="${src.dir}">
				<include name="gov/nih/nci/objectCart/client/**/*" />
				<include name="gov/nih/nci/objectCart/applicationService/*.*" />
				<include name="gov/nih/nci/objectCart/util/ValidatorException.*"/>
			</fileset>
			<fileset dir="${output.client.remote.dir}/conf">
				<include name="log4j.properties"/>
			</fileset>
		</jar>

		<jar destfile="${dist.dir}\${file.output.extension.core.name}" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
			</manifest>
			<include name="gov/nih/nci/objectCart/dao/**/*" />
			<include name="gov/nih/nci/objectCart/dao/orm/**/*" />
			<include name="gov/nih/nci/objectCart/applicationService/impl/**/*" />
			<include name="gov/nih/nci/objectCart/util/**/*" />
			<include name="gov/nih/nci/objectCart/util/xml/**/*" />
			<fileset dir="${src.dir}">
				<include name="gov/nih/nci/objectCart/dao/**/*" />
				<include name="gov/nih/nci/objectCart/dao/orm/**/*" />
				<include name="gov/nih/nci/objectCart/applicationService/impl/**/*" />
				<include name="gov/nih/nci/objectCart/util/**/*" />
				<include name="gov/nih/nci/objectCart/util/xml/**/*" />
			</fileset>
		</jar>

	</target>

	<!--***********************************************************************
	*** Create server war
	*********************************************************************** -->
	<target name="package-local-webapp" depends="dist">
		<SDKecho message="${ant.project.name}: Packaging the server"/>
		<war destfile="${dist.dir}/objcart${objcartversion}.war" webxml="${conf.dir}/system/web/WEB-INF/web.xml">
			<lib dir="${dist.dir}" includes="*.jar"/>
			<lib dir="${lib.dir}" includes="*.jar"/>
			<lib dir="${system.lib.dir}" includes="*.jar">
				<exclude name="${server-exclude-list}"/>
				<exclude name="servlet.jar"/>
				<exclude name="commons-logging*.*"/>
				<exclude name="xercesImpl*.*"/>
			</lib>
			<fileset dir="conf/system/package/local-client/conf">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${conf.dir}/system/web">
				<include name="**/*" />
				<exclude name="**/web.xml" />
			</fileset>

			<fileset dir="${web.dir}">
				<include name="**/*" />
			</fileset>
			
			<fileset dir=".">
				<include name="docs/**/*" />
			</fileset>
		</war>
	</target>

	<target name="package-webapp" depends="dist">
		<SDKecho message="${ant.project.name}: Packaging the server"/>
		<war destfile="${dist.dir}/objcart${objcartversion}.war" webxml="${conf.dir}/system/web/WEB-INF/web.xml">
			<lib dir="${dist.dir}" includes="*.jar"/>
			<lib dir="${lib.dir}" includes="*.jar"/>

			<lib dir="${system.lib.dir}" includes="*.jar">
				<exclude name="${server-exclude-list}"/>
				<exclude name="servlet.jar"/>
				<exclude name="commons-logging*.*"/>
				<exclude name="xercesImpl*.*"/>
				<exclude name="log4j*.*"/>

			</lib>
			<fileset dir="${conf.dir}/system/web">
				<include name="**/*" />
				<exclude name="**/web.xml" />
			</fileset>

			<fileset dir="${web.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir=".">
				<include name="docs/**/*" />
			</fileset>
		</war>
	</target>

	<target name="package-remote-client" depends="dist">
		<SDKecho message="${ant.project.name}: Packaging the remote client" />

		<copy todir="${output.client.remote.dir}">
			<fileset dir="${dist.dir}">
				<include name="${file.output.extension.client.name}"/>
			</fileset>
			<fileset dir="${lib.dir}" includes="objectCart-beans.jar" />
		</copy>
		<copy todir="${output.client.remote.dir}/conf">
			<fileset dir="${config.client.remote.dir}"/>
		</copy>
		<copy todir="${output.client.remote.dir}/lib">
			<fileset dir="${system.lib.dir}">
				<include name="acegi*.*"/>
				<include name="asm*.*"/>
				<include name="antlr*.*"/>
				<include name="cglib*.*"/>
				<include name="commons-codec*.*"/>
				<include name="commons-collection*.*"/>
				<include name="commons-logging*.*"/>
				<include name="hibernate*.*"/>
				<include name="log4j*.*"/>
				<include name="spring*.*"/>
				<include name="castor*.*"/>
				<include name="xercesImpl*.*"/>
			</fileset>
		</copy>
	</target>
		
    <target name="replace-sql-token" description="Puts correct tier info in Tool Options SQL">
    	<SDKecho message="${ant.project.name}: Putting correct tier info in Tool Options SQL"/>
    	<replace file="${sql.dir}/tooloptions.sql">
			<replacefilter token="@TIER@" value="${TIER}" />
		</replace>
	</target>
	
    <target name="set-tooloptions" depends="replace-sql-token" description="Execute set_options.sql">
    	<SDKecho message="${ant.project.name}: Execute tooloptions.sql"/>
        <echo>Deploying caDSR database changes ${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${sql.dir}/tooloptions.sql</echo>
        <exec dir="." executable="${SQL.EXE}" failonerror="true">
            <arg line="-L ${CADSR.DS.USER}/${CADSR.DS.PSWD}@${CADSR.DS.TNS.ENTRY} @ ${sql.dir}/tooloptions.sql" />
        </exec>
    </target>
	
    <target name="set-ds-info" description="Puts correct DB info in DS XML file">
    	<SDKecho message="${ant.project.name}: Putting correct DB info in DS XML file"/>
		<replace file="${ds.dir}/objcart-ds.xml">
			<replacefilter token="@OBJCART.DS.URL@" value="${OBJCART.DS.URL}" />
			<replacefilter token="@OBJCART.DS.USER@" value="${OBJCART.DS.USER}" />
			<replacefilter token="@OBJCART.DS.PSWD@" value="${OBJCART.DS.PSWD}" />
		</replace>
	</target>
	
	<target name="deploy-binaries-remote" depends="deploy-binaries-remote-pass, deploy-binaries-remote-key"/>
	
    <target name="deploy-binaries-remote-pass" if="remote.deploy" unless="scp.key" depends="prop-check, set-tooloptions, set-ds-info, dist, package-webapp, package-remote-client" description="Deploys the executable product binaries to API machine.">
    	<SDKecho message="${ant.project.name}: Deploying the executable product binaries to API machine."/>
    	<echo>mkdir ${SCP.PATH}/objcart</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}"  trust="true" verbose="true" failonerror="false" command="mkdir -p ${SCP.PATH}/objcart" />

        <echo>Deploying binaries to remote file system "${SCP.USER}@${SCP.HOST}:${SCP.PATH}/objcart"</echo>
        <scp todir="${SCP.USER}@${SCP.HOST}:${SCP.PATH}/objcart" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" trust="true" verbose="true">
        	<fileset file="${dist.dir}/objcart${objcartversion}.war" />
        	<fileset dir="">
        	   <include name="${ds.dir}/objcart-ds.xml" />
        	</fileset>
        </scp>
    
        <echo>cp {SCP.PATH}/objcart/objcart-ds.xml ${JBOSS.DEPLOY.DIR}/.</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" trust="true" verbose="true" command="cp ${SCP.PATH}/objcart/objcart-ds.xml ${JBOSS.DEPLOY.DIR}/." />
        
        <sleep seconds="15" />

        <echo>cp {SCP.PATH}/objcart/objcart${objcartversion}.war ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" trust="true" verbose="true" command="cp ${SCP.PATH}/objcart/objcart${objcartversion}.war ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz" />
        <echo>mv ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.war</echo>
        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" passphrase="${SCP.PASSPHRASE}" trust="true" verbose="true" command="mv ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.war" />
    </target>
	
	<target name="deploy-binaries-remote-key" if="remote.deploy" unless="scp.pass" depends="prop-check, set-tooloptions, set-ds-info, dist, package-webapp, package-remote-client" description="Deploys the executable product binaries to API machine.">
	    	<SDKecho message="${ant.project.name}: Deploying the executable product binaries to API machine."/>
	    	<echo>mkdir ${SCP.PATH}/objcart</echo>
	        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" failonerror="false" command="mkdir -p ${SCP.PATH}/objcart" />

	        <echo>Deploying binaries to remote file system "${SCP.USER}@${SCP.HOST}:${SCP.PATH}/objcart"</echo>
	        <scp todir="${SCP.USER}@${SCP.HOST}:${SCP.PATH}/objcart" port="${SCP.PORT}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true">
	        	<fileset file="${dist.dir}/objcart${objcartversion}.war" />
	        	<fileset dir="">
	        	   <include name="${ds.dir}/objcart-ds.xml" />
	        	</fileset>
	        </scp>
	    
	        <echo>cp {SCP.PATH}/objcart/objcart-ds.xml ${JBOSS.DEPLOY.DIR}/.</echo>
	        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="cp ${SCP.PATH}/objcart/objcart-ds.xml ${JBOSS.DEPLOY.DIR}/." />
	        
	        <sleep seconds="15" />

	        <echo>cp {SCP.PATH}/objcart/objcart${objcartversion}.war ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz</echo>
	        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="cp ${SCP.PATH}/objcart/objcart${objcartversion}.war ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz" />
	        <echo>mv ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.war</echo>
	        <sshexec username="${SCP.USER}" host="${SCP.HOST}" port="${SCP.PORT}" keyfile="${SCP.KEYFILE}" trust="true" verbose="true" command="mv ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz ${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.war" />
	 </target>
	
	 <target name="deploy-binaries" depends="prop-check, set-tooloptions, set-ds-info, dist, package-webapp, package-remote-client" unless="remote.deploy" description="Deploys the executable product binaries.">
        <echo>Deploying binaries to file system ...</echo>
        <copy todir="${JBOSS.DEPLOY.DIR}">
            <fileset dir="">
                <include name="${ds.dir}/objcart-ds.xml" />
            </fileset>
        </copy>
        <sleep seconds="15" />
        <copy tofile="${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz">
            <fileset file="${dist.dir}/objcart${objcartversion}.war" />
        </copy>
        <move file="${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.waz" tofile="${JBOSS.DEPLOY.DIR}/objcart${objcartversion}.war" />
	 </target>
	
	<target name="anthill-build" if="check.props" depends="clean, anthill, deploy-binaries-remote, deploy-binaries"/>
	<target name="local-build" depends="clean, local, dist, package-local-webapp, package-remote-client"/>
	<target name="dev-build" depends="clean, dev, dist, package-webapp, package-remote-client"/>

</project>
