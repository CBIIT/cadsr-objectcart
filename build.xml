<?xml version="1.0" encoding="UTF-8"?>
<project name="System" basedir="." default="dist">

	<description>Build script for building the runtime system</description>

	<property name="src.dir" location="${basedir}/src/java" />
	<property name="lib.dir" location="${basedir}/lib" />
	<property name="web.dir" location="${basedir}/src/web" />
	<property name="docs.dir" location="${basedir}/src/web/docs" />
	<property name="conf.dir" location="${basedir}/src/resources/conf" />
	<property name="ds.dir" location="${basedir}/src/resources/ds" />
	<property name="orm.dir" location="${basedir}/src/resources/conf/ORM" />
	<property name="system.lib.dir" location="${basedir}/lib/system" />
	<property name="build.dir" location="${basedir}/build" />
	<property name="build.classes.dir" location="${basedir}/build/classes" />
	<property name="dist.dir" location="${basedir}/dist" />
	<property name="output.client.remote.dir" location="${basedir}/dist/remote" />

	<property name="config.client.remote.dir" location="${basedir}/src/resources/conf/system/package/remote-client/conf" />
		
	            
	<!--***********************************************************************
	*** Import utility script
	*********************************************************************** -->
	<import file="build-utils.xml" />

	<!--***********************************************************************
	*** CLASSPATH AND UNIX-STYLE BASEDIR PROPERTIES
	*********************************************************************** -->

	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${system.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	<!-- set basedir.url = basedir as unix style pathname, regardless of platform -->
		<path id="basedir.path">
			<pathelement path="${basedir}" />
		</path>

		<pathconvert targetos="unix" property="basedir.unix" refid="basedir.path" />
		
	<!--***********************************************************************
		*** Load the build properties from the file
		*********************************************************************** -->
		
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="classpath" />
	<property name="tier" value="qa" />
	        <if>
	                <isset property="tier" />
	                <then>
	                        <!-- if tier is defined, load tier specific properties for tier based installation -->
	                	
	                        <property file="${tier}.properties" />
	                </then>
	                <else>
	                        <property file="local.build.properties" />
	                        <!--<property name="tier" value="dev" />-->
	                </else>
	        </if>


	
	  	<property name="OBJCART.DS.URL" value="${OBJCART.DS.HOST}:${OBJCART.DS.PORT}/object_cart" />
		<property name="OBJCART.DS.USER" value="${OBJCART.DS.USER}" />
		<property name="OBJCART.DS.PSWD" value="${OBJCART.DS.PSWD}" />
	<filter token="OBJCART.DS.URL" value="${OBJCART.DS.URL}" />
	<filter token="OBJCART.DS.USER" value="${OBJCART.DS.USER}" />
	<filter token="OBJCART.DS.PSWD" value="${OBJCART.DS.PSWD}" />
		

	<!--***********************************************************************
	*** Prepares the directory structure
	*********************************************************************** -->
	<target name="init">
		<SDKecho message="${ant.project.name}: Preparing directories" />
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!--***********************************************************************
	*** Condition determining if clean is possible or not
	*********************************************************************** -->
	<target name="prepare-clean-condition">
		<SDKecho message="${ant.project.name}: Checking the condition for cleaning" />
		<condition property="clean-condition-met">
			<available file="${src.dir}" type="dir" />
		</condition>
	</target>

	<!--***********************************************************************
	*** Cleans the generated directories and files
	*********************************************************************** -->
	<target name="clean" description="Cleans the generated directories and files" depends="prepare-clean-condition" if="clean-condition-met">
		<SDKecho message="${ant.project.name}: Cleaning directories and files" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!--***********************************************************************
	*** Compiles source code
	*********************************************************************** -->
	<target name="compile" depends="init" description="Compiles source code">
		<SDKecho message="${ant.project.name}: Compiling source code" />
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true">
			<classpath refid="classpath" />
			<exclude name="gov/nih/nci/objectCart/jUnit/**/*" />
		</javac>
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.dir}" includes="gov/nih/nci/system/web/struts/action/package.properties" />
		</copy>
	</target>


	<!--***********************************************************************
	*** Prepares for deployment on particular tier
	*********************************************************************** -->
	<target name="copy-hql">
		<SDKecho message="${ant.project.name}: Copying HQL config" />
		<copy todir="${orm.dir}" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="hibernate.cfg.xml" />
			</fileset>
		</copy>
	</target>

	<target name="copy-remote">
		<SDKecho message="${ant.project.name}: Copying remote-client config" />
		<mkdir dir="${output.client.remote.dir}" />
		<mkdir dir="${output.client.remote.dir}/conf" />
		<mkdir dir="${output.client.remote.dir}/lib" />

		<copy todir="${output.client.remote.dir}/conf">
			<fileset dir="${config.client.remote.dir}" />
		</copy>

	</target>

	<target name="deploy" depends="copy-hql, copy-remote" description="Setting up for deployment">
		<SDKecho message="${ant.project.name}: Deploying to Target environment" />
		<property name="local" value="true" />

		<copy todir="${orm.dir}" overwrite="true">
					<fileset dir="${conf.dir}">
						<include name="hibernate.cfg.xml" />
					</fileset>
				</copy>
			

		<replace file="${output.client.remote.dir}/conf/application-config-client.xml">
			<replacefilter token="@SERVER_URL@" value="${TIER}_SERVER_URL}" />
		</replace>

	</target>

	<!--***********************************************************************
	*** Create distributable package
	*********************************************************************** -->
	<target name="-build-jar" depends="compile" description="Prepates distribution files">
		<SDKecho message="${ant.project.name}: Creating distributable package" />

		<jar destfile="${lib.dir}\objectCart-orm.jar" basedir="${orm.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
			</manifest>
		</jar>

		<jar destfile="${dist.dir}\extension-client-framework.jar" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
			</manifest>
			<include name="gov/nih/nci/objectCart/client/**/*" />
			<include name="gov/nih/nci/objectCart/applicationService/*.*" />
			<include name="gov/nih/nci/objectCart/util/ValidatorException.*" />
			<fileset dir="${src.dir}">
				<include name="gov/nih/nci/objectCart/client/**/*" />
				<include name="gov/nih/nci/objectCart/applicationService/*.*" />
				<include name="gov/nih/nci/objectCart/util/ValidatorException.*" />
			</fileset>
			<fileset dir="${output.client.remote.dir}/conf">
				<include name="log4j.properties" />
			</fileset>
		</jar>

		<jar destfile="${dist.dir}\extension-core.jar" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
			</manifest>
			<include name="gov/nih/nci/objectCart/dao/**/*" />
			<include name="gov/nih/nci/objectCart/dao/orm/**/*" />
			<include name="gov/nih/nci/objectCart/applicationService/impl/**/*" />
			<include name="gov/nih/nci/objectCart/util/**/*" />
			<include name="gov/nih/nci/objectCart/util/xml/**/*" />
			<fileset dir="${src.dir}">
				<include name="gov/nih/nci/objectCart/dao/**/*" />
				<include name="gov/nih/nci/objectCart/dao/orm/**/*" />
				<include name="gov/nih/nci/objectCart/applicationService/impl/**/*" />
				<include name="gov/nih/nci/objectCart/util/**/*" />
				<include name="gov/nih/nci/objectCart/util/xml/**/*" />
			</fileset>
		</jar>

	</target>

	<!--***********************************************************************
	*** Create server war
	*********************************************************************** -->
	
	<target name="package-webapp" depends="-build-jar">
		<SDKecho message="${ant.project.name}: Packaging the server" />
		<war destfile="${dist.dir}/objcart${objcartversion}.war" webxml="${conf.dir}/system/web/WEB-INF/web.xml">
			<lib dir="${dist.dir}" includes="*.jar" />
			<lib dir="${lib.dir}" includes="*.jar" />

			<lib dir="${system.lib.dir}" includes="*.jar">
				<exclude name="${server-exclude-list}" />
				<exclude name="servlet.jar" />
				<exclude name="commons-logging*.*" />
				<exclude name="xercesImpl*.*" />
				<exclude name="log4*.jar" />

			</lib>
			<fileset dir="${conf.dir}/system/web">
				<include name="**/*" />
				<exclude name="**/web.xml" />
			</fileset>

			<fileset dir="${web.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir=".">
				<include name="docs/**/*" />
			</fileset>
		</war>
		<copy todir="${dist.dir}/jboss">
			<fileset dir="${ds.dir}">
				<include name="objcart-ds.xml" />
				
			</fileset>
		</copy>
		<replace file="${dist.dir}/jboss/objcart-ds.xml" token="@OBJCART.DS.URL@" value="${OBJCART.DS.URL}" />
		<replace file="${dist.dir}/jboss/objcart-ds.xml" token="@OBJCART.DS.USER@" value="${OBJCART.DS.USER}" />
		<replace file="${dist.dir}/jboss/objcart-ds.xml" token="@OBJCART.DS.PSWD@" value="${OBJCART.DS.PSWD}" />
		<copy todir="${dist.dir}/jboss">
			<fileset dir="${lib.dir}/system">
				<include name="mysql-connector-java-5.1.13.jar" />
			</fileset>
		</copy>

	</target>

	<target name="package-remote-client" depends="-build-jar">
		<SDKecho message="${ant.project.name}: Packaging the remote client" />

		<copy todir="${output.client.remote.dir}">
			<fileset dir="${dist.dir}">
				<include name="${file.output.extension.client.name}" />
			</fileset>
			<fileset dir="${lib.dir}" includes="objectCart-beans.jar" />
		</copy>
		<copy todir="${output.client.remote.dir}/conf">
			<fileset dir="${config.client.remote.dir}" />
		</copy>
		<copy todir="${output.client.remote.dir}/lib">
			<fileset dir="${system.lib.dir}">
				<include name="acegi*.*" />
				<include name="asm*.*" />
				<include name="antlr*.*" />
				<include name="cglib*.*" />
				<include name="commons-codec*.*" />
				<include name="commons-collection*.*" />
				<include name="commons-logging*.*" />
				<include name="hibernate*.*" />
				<include name="log4j*.*" />
				<include name="spring*.*" />
				<include name="castor*.*" />
				<include name="xercesImpl*.*" />
			</fileset>
		</copy>
	</target>
	

	<target name="dist" depends="deploy, -build-jar, package-webapp, package-remote-client" />
	 
	</project>
